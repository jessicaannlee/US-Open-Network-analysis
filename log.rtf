{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fnil\fcharset0 LucidaSans;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs20 \cf0 # Plotting networks in R \
# An example how to use R and rgexf package to create a .gexf file for network visualization in Gephi\
\
############################################################################################\
# Clear workspace \
rm(list = ls())\
\
# working directory\
\
setwd("/Users/Jessica/Documents/Data Vis/Assignment 4")\
\
# Load libraries\
library("igraph")\
require("igraph")\
library("dplyr")\
require("dplyr")\
\
#install.packages("plyr")\
library("plyr")\
require("plyr")\
\
#install.packages("rgexf")\
library("rgexf")\
\
# read the csv\
\
uso <- read.csv("11yearsMenUSOpenMatches.csv")\
\
head(uso)\
\
countries <- tbl_df(uso)\
\
head(countries)\
\
# drop the columns//clean it up\
\
countries$gender <- NULL\
\
countries$tid <- NULL\
\
countries$firstServe1 <- NULL\
\
countries$firstserve2 <- NULL\
\
countries$ace1 <- NULL\
\
countries$ace2 <- NULL\
\
countries$double1 <- NULL\
\
countries$double2 <- NULL\
\
countries$firstPointWon1 <- NULL\
\
countries$firstPointWon2 <- NULL\
\
countries$secPointWon1 <- NULL\
\
countries$secPointWon2 <- NULL\
\
countries$fastServe1 <- NULL\
\
countries$fastServe2 <- NULL\
\
countries$avgFirstServe1 <- NULL\
\
countries$avgfirstServe2 <- NULL\
\
countries$avgSecServe1 <- NULL\
\
countries$avgSecServe2 <- NULL\
\
countries$break1 <- NULL\
\
countries$break2 <- NULL\
\
countries$return1 <-NULL\
\
countries$return2 <- NULL\
\
countries$total1 <- NULL\
\
countries$total2 <- NULL\
\
countries$winner1 <- NULL\
\
countries$winner2 <- NULL\
\
countries$error1 <- NULL\
\
countries$error2 <- NULL\
\
countries$net1 <- NULL\
\
countries$net2 <- NULL\
\
countries$mid <- NULL\
\
countries$firstServe2<-NULL\
\
countries$avgFirstServe2<-NULL\
\
players <- data.frame(countries)\
\
players.latest <- filter(players, year==2012)\
\
players.latest$year <- NULL\
\
players.latest$country1 <- NULL\
\
players.latest$country2 <- NULL\
\
write.csv(players.latest, file="players2012.csv")\
\
# for myself\
\
# players.latest <- read.csv("players2012.csv")\
\
# Create a graph. Use simplify to ensure that there are no duplicated edges or self loops\
gD <- simplify(graph.data.frame(players.latest, directed=FALSE))\
\
# Print number of nodes and edges\
# vcount(gD)\
# ecount(gD)\
\
############################################################################################\
# Calculate some node properties and node similarities that will be used to illustrate \
# different plotting abilities\
\
# Calculate degree for all nodes\
degAll <- degree(gD, v = V(gD), mode = "all")\
\
# Calculate betweenness for all nodes\
betAll <- betweenness(gD, v = V(gD), directed = FALSE) / (((vcount(gD) - 1) * (vcount(gD)-2)) / 2)\
betAll.norm <- (betAll - min(betAll))/(max(betAll) - min(betAll))\
rm(betAll)\
\
# Calculate Dice similarities between all pairs of nodes\
dsAll <- similarity.dice(gD, vids = V(gD), mode = "all")\
\
############################################################################################\
# Add new node/edge attributes based on the calculated node properties/similarities\
\
gD <- set.vertex.attribute(gD, "degree", index = V(gD), value = degAll)\
gD <- set.vertex.attribute(gD, "betweenness", index = V(gD), value = betAll.norm)\
\
# Check the attributes\
# summary(gD)\
\
F1 <- function(x) \{data.frame(V3 = dsAll[which(V(gD)$name == as.character(x$player1)), which(V(gD)$name == as.character(x$player2))])\}\
dataSet.ext <- ddply(players.latest, .variables=c("player1", "player2"), function(x) data.frame(F1(x)))\
\
gD <- set.edge.attribute(gD, "weight", index = E(gD), value = 0)\
gD <- set.edge.attribute(gD, "similarity", index = E(gD), value = 0)\
\
E(gD)[as.character(dataSet.ext$player1) %--% as.character(dataSet.ext$player2)]$weight <- as.numeric(dataSet.ext$V3)\
# next command doesn't work; replacement has length zero (no "V3" in our original dataset)\
#E(gD)[as.character(dataSet.ext$player1) %--% as.character(dataSet.ext$player2)]$similarity <- as.numeric(dataSet.ext$V4)\
\
\
# Check the attributes\
# summary(gD)\
\
####################################\
# Print network in the file format ready for Gephi\
# This requires rgexf package\
\
library("rgexf")\
\
# Create a dataframe nodes: 1st column - node ID, 2nd column -node name\
nodes_df <- data.frame(ID = c(1:vcount(gD)), NAME = V(gD)$name)\
# Create a dataframe edges: 1st column - source node ID, 2nd column -target node ID\
edges_df <- as.data.frame(get.edges(gD, c(1:ecount(gD))))\
\
# Define node and edge attributes - these attributes won't be directly used for network visualization, but they\
# may be useful for other network manipulations in Gephi\
#\
# Create a dataframe with node attributes: 1st column - attribute 1 (degree), 2nd column - attribute 2 (betweenness)\
nodes_att <- data.frame(DEG = V(gD)$degree, BET = V(gD)$betweenness) \
## Create a dataframe with edge attributes: 1st column - attribute 1 (weight), 2nd column - attribute 2 (similarity)\
edges_att <- data.frame(WGH = E(gD)$weight, SIM = E(gD)$similarity) \
\
# Calculate node coordinate - needs to be 3D\
#nodes_coord <- as.data.frame(layout.fruchterman.reingold(gD, weights = E(gD)$similarity, dim = 3, niter = 10000))\
# We'll cheat here, as 2D coordinates result in a better (2D) plot than 3D coordinates\
nodes_coord <- as.data.frame(layout.fruchterman.reingold(gD, weights = E(gD)$similarity, dim = 2, niter = 10000))\
nodes_coord <- cbind(nodes_coord, rep(0, times = nrow(nodes_coord)))\
#\
# Calculate node size\
# We'll interpolate node size based on the node betweenness centrality, using the "approx" function\
approxVals <- approx(c(1, 5), n = length(unique(V(gD)$betweenness)))\
# And we will assign a node size for each node based on its betweenness centrality\
nodes_size <- sapply(V(gD)$betweenness, function(x) approxVals$y[which(sort(unique(V(gD)$betweenness)) == x)])\
#\
# Define node color\
# We'll interpolate node colors based on the node degree using the "colorRampPalette" function from the "grDevices" library\
library("grDevices")\
#\
# This function returns a function corresponding to a collor palete of "bias" number of elements\
F2 <- colorRampPalette(c("#99d8c9", "#2ca25f"), bias = length(unique(V(gD)$degree)), space = "rgb", interpolate = "linear")\
# Now we'll create a color for each degree\
colCodes <- F2(length(unique(V(gD)$degree)))\
# And we will assign a color for each node based on its degree\
nodes_col <- sapply(V(gD)$degree, function(x) colCodes[which(sort(unique(V(gD)$degree)) == x)])\
# Transform it into a data frame (we have to transpose it first)\
nodes_col_df <- as.data.frame(t(col2rgb(nodes_col, alpha = FALSE)))\
# And add alpha (between 0 and 1). The alpha from "col2rgb" function takes values from 0-255, so we cannot use it\
nodes_col_df <- cbind(nodes_col_df, alpha = rep(1, times = nrow(nodes_col_df)))\
# Assign visual attributes to nodes (colors have to be 4dimensional - RGBA)\
nodes_att_viz <- list(color = nodes_col_df, position = nodes_coord, size = nodes_size)\
\
# Assign visual attributes to edges using the same approach as we did for nodes\
F2 <- colorRampPalette(c("#FFFF00", "#006400"), bias = length(unique(E(gD)$weight)), space = "rgb", interpolate = "linear")\
colCodes <- F2(length(unique(E(gD)$weight)))\
edges_col <- sapply(E(gD)$weight, function(x) colCodes[which(sort(unique(E(gD)$weight)) == x)])\
edges_col_df <- as.data.frame(t(col2rgb(edges_col, alpha = FALSE)))\
edges_col_df <- cbind(edges_col_df, alpha = rep(1, times = nrow(edges_col_df)))\
edges_att_viz <-list(color = edges_col_df)\
\
# Write the network into a gexf (Gephi) file\
\
write.gexf(nodes = nodes_df, edges = edges_df, nodesAtt = nodes_att, edgesWeight = E(gD)$weight, edgesAtt = edges_att, nodesVizAtt = nodes_att_viz, edgesVizAtt = edges_att_viz, defaultedgetype = "undirected", output = "uso12.gexf")\
\
# And without edge weights\
\
write.gexf(nodes = nodes_df, edges = edges_df, nodesAtt = nodes_att, edgesAtt = edges_att, nodesVizAtt = nodes_att_viz, edgesVizAtt = edges_att_viz, defaultedgetype = "undirected", output = "uso12_1.gexf")\
\
}